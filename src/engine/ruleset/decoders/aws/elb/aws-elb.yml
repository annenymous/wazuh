name: decoder/aws-elb/0

definitions:
  ELBTIMESTAMP: <timestamp/ISO8601_Z>
  ELBNAME: <aws.elb.name>
  ELBSOURCE: <source.ip>:<source.port>
  # Or -
  ELBBACKEND: <aws.elb.backend.ip>:<aws.elb.backend.port>
  # Or -1 for each expression
  ELBPROCESSINGTIME: >-
    <aws.elb.request_processing_time.sec>
    <aws.elb.backend_processing_time.sec>
    <aws.elb.response_processing_time.sec>
  #  Or - for each expression
  ELBSSL: <aws.elb.ssl_cipher> <aws.elb.ssl_protocol>
  ELBCOMMON: $ELBTIMESTAMP $ELBNAME $ELBSOURCE $ELBBACKEND $ELBPROCESSINGTIME
  ELBHTTPLOG: >-
    $ELBCOMMON
    <http.response.status_code>
    <aws.elb.backend.http.response.status_code>
    <http.request.body.bytes>
    <http.response.body.bytes>
    \"<http.request.method> <_tmp.uri_orig> <http.version>\"
    <_tmp.user_agent/quoted>
    $ELBSSL
  ELBTCPLOG: >-
    $ELBCOMMON
    -
    -
    <source.bytes>
    <destination.bytes>
    \"- - -<_/ >\"
    \"-\"
    $ELBSSL
  ELBV2TYPE: <aws.elb.type>
  ELBV2LOGVERSION: <_/ignore/ > # ignore spaces

check:
  - wazuh.queue: 49
  - event.original: +ef_exists

parse:
  logpar:
    # HTTP (Classic ELB)
    - event.original: $ELBHTTPLOG
    # TCP (Classic ELB)
    - event.original: $ELBTCPLOG
    # HTTP from Application Load Balancers (v2 Load Balancers)
    - event.original: >-
        $ELBV2TYPE
        $ELBHTTPLOG
        <aws.elb.target_group.arn>
        "<aws.elb.trace_id>"
        "<destination.domain>"
        "<aws.elb.chosen_cert.arn>"
        <aws.elb.matched_rule_priority>
        <event.start/ISO8601_Z>
        <_tmp.actions_executed/quoted>
        "<aws.elb.redirect_url>"
        "<aws.elb.error.reason>"<?_tmp.http_v2_optional>
    # TODO: process _tmp.http_v2_optional
    # TCP from Network Load Balancers (v2 Load Balancers)
    - event.original: >-
        $ELBV2TYPE
        $ELBV2LOGVERSION
        $ELBTIMESTAMP
        $ELBNAME
        <aws.elb.listener>
        $ELBSOURCE
        $ELBBACKEND
        <aws.elb.connection_time.ms>
        <aws.elb.tls_handshake_time.ms>
        <source.bytes>
        <destination.bytes>
        <NUMBER:aws.elb.incoming_tls_alert>
        <aws.elb.chosen_cert.arn>
        <aws.elb.chosen_cert.serial>
        $ELBSSL
        <aws.elb.ssl_named_group>
        <NOTSPACE:destination.domain>

normalize:
  - map:
      - event.kind: event
      - event.dataset: aws
      - event.module: aws
      - cloud.provider: aws
      - service.type: aws
      - trace.id: $aws.elb.trace_id
      - aws.elb.action_executed: +s_to_array/$_tmp.actions_executed/,
      - aws.elb.target_port: "+s_to_array/$_tmp.target_port/ "
      - aws.elb.target_status_code: "+s_to_array/$_tmp.target_status_code/ "
      - event.end: $timestamp
      - tls.cipher: $aws.elb.ssl_cipher
      # TODO: process ssl_protocol once parse is avaliable on normalize

  - check:
      - http: +ef_exists
    map:
      - aws.elb.protocol: http
      - event.category: +s_append/web

  - check:
      - http.response.status_code: +i_lt/400
    map:
      - event.outcome: success

  - check:
      - http.response.status_code: +i_ge/400
    map:
      - event.outcome: failure

  - check:
      - http: +ef_not_exists
    map:
      - aws.elb.protocol: tcp
      - event.category: +s_append/network

  #TODO: add uri and user_agent once parsers are fixed
