---
name: decoder/auditd-decode-kv/0

metadata:
  description: Decoder for parsing the msg field of Linux auditd logs
  references:
    - https://docs.elastic.co/en/integrations/auditd
  product.name: auditd

parents:
  - decoder/auditd/0

check:
  - _kv_msg: +ef_exists

parse:
  logpar:
    - _kv_msg: <_kv_map/kv_map/=/ >

normalize:
  - map:
      - auditd.log: +ef_rename/$_kv_map
      - auditd.log.node: +ef_rename/$_node
      - _kv_msg: +ef_delete

  - check:
      - auditd.log.syscall: +s_eq/execve
    map:
      - event.category: [process]
      - event.type: info

  - check:
      - auditd.log.record_type: +s_eq/SYSTEM_BOOT
    map:
      - event.category: [host]
      - event.type: info

  - check:
      - auditd.log.record_type: +s_eq/SYSTEM_SHUTDOWN
    map:
      - event.category: [host]
      - event.type: info

  - check:
      - auditd.log.record_type: +s_eq/VIRT_CONTROL
    map:
      - event.category: [host]

  - check:
      - auditd.log.record_type: +s_eq/VIRT_MACHINE_ID
    map:
      - event.category: [host]

  - check: >-
      auditd.log.syscall==accept OR auditd.log.syscall==43 OR
      auditd.log.syscall==recvfrom OR auditd.log.syscall==45 OR
      auditd.log.syscall==recvmsg OR auditd.log.syscall==47 OR
      auditd.log.syscall==accept4 OR auditd.log.syscall==288
    map:
      - network.direction: ingress

  - check: >-
      auditd.log.syscall==connect OR auditd.log.syscall==42 OR
      auditd.log.syscall==sendto OR auditd.log.syscall==44 OR
      auditd.log.syscall==sendmsg OR auditd.log.syscall==46
    map:
      - network.direction: egress

  - check:
      - auditd.log.op: +s_eq/start
      - auditd.log.record_type: +s_eq/VIRT_CONTROL
    map:
      - event.type: start

  - check:
      - auditd.log.op: +s_eq/stop
      - auditd.log.record_type: +s_eq/VIRT_CONTROL
    map:
      - event.type: end

  - check:
      - auditd.log.op: +s_eq/create
      - auditd.log.record_type: +s_eq/VIRT_CONTROL
    map:
      - event.type: creation

  - check:
      - auditd.log.op: +s_eq/delete
      - auditd.log.record_type: +s_eq/VIRT_CONTROL
    map:
      - event.type: deletion

  - check:
      - auditd.log.record_type: +s_eq/VIRT_MACHINE_ID
    map:
      - event.type: creation
      - container.name: $auditd.log.vm
      - container.runtime: $auditd.log.virt

  - check:
      - auditd.log.user: +ef_not_exists
    map:
      - user.name: +ef_rename/$auditd.log.acct

  - check:
      - auditd.log.success: +s_eq/no
    map:
      - auditd.log.success: false

  - check:
      - auditd.log.success: +s_eq/yes
    map:
      - auditd.log.success: true

  - check:
      - auditd.log.src: +ef_not_exists
    map:
      - auditd.log.src: $auditd.log.addr

  # Start of hexa to string fields transformation
  - check:
      - auditd.log.exe: +s_starts/"
    map:
      - auditd.log.exe: +s_trim/both/"
      - _hex.exe_is_str: true
  - check:
      - _hex.exe_is_str: +ef_not_exists
      - auditd.log.exe: +s_starts/'
    map:
      - auditd.log.exe: +s_trim/both/'
      - _hex.exe_is_str: true
  - check:
      - _hex.exe_is_str: +ef_not_exists
    map:
      - auditd.log.exe: +s_from_hexa/$auditd.log.exe

  - check:
      - auditd.log.cmd: +s_starts/"
    map:
      - auditd.log.cmd: +s_trim/both/"
      - _hex.cmd_is_str: true
  - check:
      - _hex.cmd_is_str: +ef_not_exists
      - auditd.log.cmd: +s_starts/'
    map:
      - auditd.log.cmd: +s_trim/both/'
      - _hex.cmd_is_str: true
  - check:
      - _hex.cmd_is_str: +ef_not_exists
    map:
      - auditd.log.cmd: +s_from_hexa/$auditd.log.cmd

  - check:
      - auditd.log.data: +s_starts/"
    map:
      - auditd.log.data: +s_trim/both/"
      - _hex.data_is_str: true
  - check:
      - _hex.data_is_str: +ef_not_exists
      - auditd.log.data: +s_starts/'
    map:
      - auditd.log.data: +s_trim/both/'
      - _hex.data_is_str: true
  - check:
      - _hex.data_is_str: +ef_not_exists
    map:
      - auditd.log.data: +s_from_hexa/$auditd.log.data

  - check:
      - auditd.log.path: +s_starts/"
    map:
      - auditd.log.path: +s_trim/both/"
      - _hex.path_is_str: true
  - check:
      - _hex.path_is_str: +ef_not_exists
      - auditd.log.path: +s_starts/'
    map:
      - auditd.log.path: +s_trim/both/'
      - _hex.path_is_str: true
  - check:
      - _hex.path_is_str: +ef_not_exists
    map:
      - auditd.log.path: +s_from_hexa/$auditd.log.path

  - check:
      - auditd.log.comm: +s_starts/"
    map:
      - auditd.log.comm: +s_trim/both/"
      - _hex.comm_is_str: true
  - check:
      - _hex.comm_is_str: +ef_not_exists
      - auditd.log.comm: +s_starts/'
    map:
      - auditd.log.comm: +s_trim/both/'
      - _hex.comm_is_str: true
  - check:
      - _hex.comm_is_str: +ef_not_exists
    map:
      - auditd.log.comm: +s_from_hexa/$auditd.log.comm

  - check:
      - auditd.log.file: +s_starts/"
    map:
      - auditd.log.file: +s_trim/both/"
      - _hex.file_is_str: true
  - check:
      - _hex.file_is_str: +ef_not_exists
      - auditd.log.file: +s_starts/'
    map:
      - auditd.log.file: +s_trim/both/'
      - _hex.file_is_str: true
  - check:
      - _hex.file_is_str: +ef_not_exists
    map:
      - auditd.log.file: +s_from_hexa/$auditd.log.file

  - check:
      - auditd.log.name: +s_starts/"
    map:
      - auditd.log.name: +s_trim/both/"
      - _hex.name_is_str: true
  - check:
      - _hex.name_is_str: +ef_not_exists
      - auditd.log.name: +s_starts/'
    map:
      - auditd.log.name: +s_trim/both/'
      - _hex.name_is_str: true
  - check:
      - _hex.name_is_str: +ef_not_exists
    map:
      - auditd.log.name: +s_from_hexa/$auditd.log.name

  - check:
      - auditd.log.watch: +s_starts/"
    map:
      - auditd.log.watch: +s_trim/both/"
      - _hex.watch_is_str: true
  - check:
      - _hex.watch_is_str: +ef_not_exists
      - auditd.log.watch: +s_starts/'
    map:
      - auditd.log.watch: +s_trim/both/'
      - _hex.watch_is_str: true
  - check:
      - _hex.watch_is_str: +ef_not_exists
    map:
      - auditd.log.watch: +s_from_hexa/$auditd.log.watch

  - check:
      - auditd.log.cwd: +s_starts/"
    map:
      - auditd.log.cwd: +s_trim/both/"
      - _hex.cwd_is_str: true
  - check:
      - _hex.cwd_is_str: +ef_not_exists
      - auditd.log.cwd: +s_starts/'
    map:
      - auditd.log.cwd: +s_trim/both/'
      - _hex.cwd_is_str: true
  - check:
      - _hex.cwd_is_str: +ef_not_exists
    map:
      - auditd.log.cwd: +s_from_hexa/$auditd.log.cwd

  - check:
      - auditd.log.acct: +s_starts/"
    map:
      - auditd.log.acct: +s_trim/both/"
      - _hex.acct_is_str: true
  - check:
      - _hex.acct_is_str: +ef_not_exists
      - auditd.log.acct: +s_starts/'
    map:
      - auditd.log.acct: +s_trim/both/'
      - _hex.acct_is_str: true
  - check:
      - _hex.acct_is_str: +ef_not_exists
    map:
      - auditd.log.acct: +s_from_hexa/$auditd.log.acct

  - check:
      - auditd.log.dir: +s_starts/"
    map:
      - auditd.log.dir: +s_trim/both/"
      - _hex.dir_is_str: true
  - check:
      - _hex.dir_is_str: +ef_not_exists
      - auditd.log.dir: +s_starts/'
    map:
      - auditd.log.dir: +s_trim/both/'
      - _hex.dir_is_str: true
  - check:
      - _hex.dir_is_str: +ef_not_exists
    map:
      - auditd.log.dir: +s_from_hexa/$auditd.log.dir

  - check:
      - auditd.log.vm: +s_starts/"
    map:
      - auditd.log.vm: +s_trim/both/"
      - _hex.vm_is_str: true
  - check:
      - _hex.vm_is_str: +ef_not_exists
      - auditd.log.vm: +s_starts/'
    map:
      - auditd.log.vm: +s_trim/both/'
      - _hex.vm_is_str: true
  - check:
      - _hex.vm_is_str: +ef_not_exists
    map:
      - auditd.log.vm: +s_from_hexa/$auditd.log.vm

  - check:
      - auditd.log.old-chardev: +s_starts/"
    map:
      - auditd.log.old-chardev: +s_trim/both/"
      - _hex.old-chardev_is_str: true
  - check:
      - _hex.old-chardev_is_str: +ef_not_exists
      - auditd.log.old-chardev: +s_starts/'
    map:
      - auditd.log.old-chardev: +s_trim/both/'
      - _hex.old-chardev_is_str: true
  - check:
      - _hex.old-chardev_is_str: +ef_not_exists
    map:
      - auditd.log.old-chardev: +s_from_hexa/$auditd.log.old-chardev

  - check:
      - auditd.log.new-chardev: +s_starts/"
    map:
      - auditd.log.new-chardev: +s_trim/both/"
      - _hex.new-chardev_is_str: true
  - check:
      - _hex.new-chardev_is_str: +ef_not_exists
      - auditd.log.new-chardev: +s_starts/'
    map:
      - auditd.log.new-chardev: +s_trim/both/'
      - _hex.new-chardev_is_str: true
  - check:
      - _hex.new-chardev_is_str: +ef_not_exists
    map:
      - auditd.log.new-chardev: +s_from_hexa/$auditd.log.new-chardev

  - check:
      - auditd.log.old-disk: +s_starts/"
    map:
      - auditd.log.old-disk: +s_trim/both/"
      - _hex.old-disk_is_str: true
  - check:
      - _hex.old-disk_is_str: +ef_not_exists
      - auditd.log.old-disk: +s_starts/'
    map:
      - auditd.log.old-disk: +s_trim/both/'
      - _hex.old-disk_is_str: true
  - check:
      - _hex.old-disk_is_str: +ef_not_exists
    map:
      - auditd.log.old-disk: +s_from_hexa/$auditd.log.old-disk

  - check:
      - auditd.log.new-disk: +s_starts/"
    map:
      - auditd.log.new-disk: +s_trim/both/"
      - _hex.new-disk_is_str: true
  - check:
      - _hex.new-disk_is_str: +ef_not_exists
      - auditd.log.new-disk: +s_starts/'
    map:
      - auditd.log.new-disk: +s_trim/both/'
      - _hex.new-disk_is_str: true
  - check:
      - _hex.new-disk_is_str: +ef_not_exists
    map:
      - auditd.log.new-disk: +s_from_hexa/$auditd.log.new-disk

  - check:
      - auditd.log.old-fs: +s_starts/"
    map:
      - auditd.log.old-fs: +s_trim/both/"
      - _hex.old-fs_is_str: true
  - check:
      - _hex.old-fs_is_str: +ef_not_exists
      - auditd.log.old-fs: +s_starts/'
    map:
      - auditd.log.old-fs: +s_trim/both/'
      - _hex.old-fs_is_str: true
  - check:
      - _hex.old-fs_is_str: +ef_not_exists
    map:
      - auditd.log.old-fs: +s_from_hexa/$auditd.log.old-fs

  - check:
      - auditd.log.new-fs: +s_starts/"
    map:
      - auditd.log.new-fs: +s_trim/both/"
      - _hex.new-fs_is_str: true
  - check:
      - _hex.new-fs_is_str: +ef_not_exists
      - auditd.log.new-fs: +s_starts/'
    map:
      - auditd.log.new-fs: +s_trim/both/'
      - _hex.new-fs_is_str: true
  - check:
      - _hex.new-fs_is_str: +ef_not_exists
    map:
      - auditd.log.new-fs: +s_from_hexa/$auditd.log.new-fs

  - check:
      - auditd.log.old-net: +s_starts/"
    map:
      - auditd.log.old-net: +s_trim/both/"
      - _hex.old-net_is_str: true
  - check:
      - _hex.old-net_is_str: +ef_not_exists
      - auditd.log.old-net: +s_starts/'
    map:
      - auditd.log.old-net: +s_trim/both/'
      - _hex.old-net_is_str: true
  - check:
      - _hex.old-net_is_str: +ef_not_exists
    map:
      - auditd.log.old-net: +s_from_hexa/$auditd.log.old-net

  - check:
      - auditd.log.new-net: +s_starts/"
    map:
      - auditd.log.new-net: +s_trim/both/"
      - _hex.new-net_is_str: true
  - check:
      - _hex.new-net_is_str: +ef_not_exists
      - auditd.log.new-net: +s_starts/'
    map:
      - auditd.log.new-net: +s_trim/both/'
      - _hex.new-net_is_str: true
  - check:
      - _hex.new-net_is_str: +ef_not_exists
    map:
      - auditd.log.new-net: +s_from_hexa/$auditd.log.new-net

  - check:
      - auditd.log.device: +s_starts/"
    map:
      - auditd.log.device: +s_trim/both/"
      - _hex.device_is_str: true
  - check:
      - _hex.device_is_str: +ef_not_exists
      - auditd.log.device: +s_starts/'
    map:
      - auditd.log.device: +s_trim/both/'
      - _hex.device_is_str: true
  - check:
      - _hex.device_is_str: +ef_not_exists
    map:
      - auditd.log.device: +s_from_hexa/$auditd.log.device

  - check:
      - auditd.log.cgroup: +s_starts/"
    map:
      - auditd.log.cgroup: +s_trim/both/"
      - _hex.cgroup_is_str: true
  - check:
      - _hex.cgroup_is_str: +ef_not_exists
      - auditd.log.cgroup: +s_starts/'
    map:
      - auditd.log.cgroup: +s_trim/both/'
      - _hex.cgroup_is_str: true
  - check:
      - _hex.cgroup_is_str: +ef_not_exists
    map:
      - auditd.log.cgroup: +s_from_hexa/$auditd.log.cgroup

  - check:
      - auditd.log.apparmor: +s_starts/"
    map:
      - auditd.log.apparmor: +s_trim/both/"
      - _hex.apparmor_is_str: true
  - check:
      - _hex.apparmor_is_str: +ef_not_exists
      - auditd.log.apparmor: +s_starts/'
    map:
      - auditd.log.apparmor: +s_trim/both/'
      - _hex.apparmor_is_str: true
  - check:
      - _hex.apparmor_is_str: +ef_not_exists
    map:
      - auditd.log.apparmor: +s_from_hexa/$auditd.log.apparmor

  - check:
      - auditd.log.operation: +s_starts/"
    map:
      - auditd.log.operation: +s_trim/both/"
      - _hex.operation_is_str: true
  - check:
      - _hex.operation_is_str: +ef_not_exists
      - auditd.log.operation: +s_starts/'
    map:
      - auditd.log.operation: +s_trim/both/'
      - _hex.operation_is_str: true
  - check:
      - _hex.operation_is_str: +ef_not_exists
    map:
      - auditd.log.operation: +s_from_hexa/$auditd.log.operation

  - check:
      - auditd.log.denied_mask: +s_starts/"
    map:
      - auditd.log.denied_mask: +s_trim/both/"
      - _hex.denied_mask_is_str: true
  - check:
      - _hex.denied_mask_is_str: +ef_not_exists
      - auditd.log.denied_mask: +s_starts/'
    map:
      - auditd.log.denied_mask: +s_trim/both/'
      - _hex.denied_mask_is_str: true
  - check:
      - _hex.denied_mask_is_str: +ef_not_exists
    map:
      - auditd.log.denied_mask: +s_from_hexa/$auditd.log.denied_mask

  - check:
      - auditd.log.info: +s_starts/"
    map:
      - auditd.log.info: +s_trim/both/"
      - _hex.info_is_str: true
  - check:
      - _hex.info_is_str: +ef_not_exists
      - auditd.log.info: +s_starts/'
    map:
      - auditd.log.info: +s_trim/both/'
      - _hex.info_is_str: true
  - check:
      - _hex.info_is_str: +ef_not_exists
    map:
      - auditd.log.info: +s_from_hexa/$auditd.log.info

  - check:
      - auditd.log.profile: +s_starts/"
    map:
      - auditd.log.profile: +s_trim/both/"
      - _hex.profile_is_str: true
  - check:
      - _hex.profile_is_str: +ef_not_exists
      - auditd.log.profile: +s_starts/'
    map:
      - auditd.log.profile: +s_trim/both/'
      - _hex.profile_is_str: true
  - check:
      - _hex.profile_is_str: +ef_not_exists
    map:
      - auditd.log.profile: +s_from_hexa/$auditd.log.profile

  - check:
      - auditd.log.requested_mask: +s_starts/"
    map:
      - auditd.log.requested_mask: +s_trim/both/"
      - _hex.requested_mask_is_str: true
  - check:
      - _hex.requested_mask_is_str: +ef_not_exists
      - auditd.log.requested_mask: +s_starts/'
    map:
      - auditd.log.requested_mask: +s_trim/both/'
      - _hex.requested_mask_is_str: true
  - check:
      - _hex.requested_mask_is_str: +ef_not_exists
    map:
      - auditd.log.requested_mask: +s_from_hexa/$auditd.log.requested_mask

  - check:
      - auditd.log.old-rng: +s_starts/"
    map:
      - auditd.log.old-rng: +s_trim/both/"
      - _hex.old-rng_is_str: true
  - check:
      - _hex.old-rng_is_str: +ef_not_exists
      - auditd.log.old-rng: +s_starts/'
    map:
      - auditd.log.old-rng: +s_trim/both/'
      - _hex.old-rng_is_str: true
  - check:
      - _hex.old-rng_is_str: +ef_not_exists
    map:
      - auditd.log.old-rng: +s_from_hexa/$auditd.log.old-rng

  - check:
      - auditd.log.new-rng: +s_starts/"
    map:
      - auditd.log.new-rng: +s_trim/both/"
      - _hex.new-rng_is_str: true
  - check:
      - _hex.new-rng_is_str: +ef_not_exists
      - auditd.log.new-rng: +s_starts/'
    map:
      - auditd.log.new-rng: +s_trim/both/'
      - _hex.new-rng_is_str: true
  - check:
      - _hex.new-rng_is_str: +ef_not_exists
    map:
      - auditd.log.new-rng: +s_from_hexa/$auditd.log.new-rng

  - check:
      - auditd.log.ocomm: +s_starts/"
    map:
      - auditd.log.ocomm: +s_trim/both/"
      - _hex.ocomm_is_str: true
  - check:
      - _hex.ocomm_is_str: +ef_not_exists
      - auditd.log.ocomm: +s_starts/'
    map:
      - auditd.log.ocomm: +s_trim/both/'
      - _hex.ocomm_is_str: true
  - check:
      - _hex.ocomm_is_str: +ef_not_exists
    map:
      - auditd.log.ocomm: +s_from_hexa/$auditd.log.ocomm

  - check:
      - auditd.log.grp: +s_starts/"
    map:
      - auditd.log.grp: +s_trim/both/"
      - _hex.grp_is_str: true
  - check:
      - _hex.grp_is_str: +ef_not_exists
      - auditd.log.grp: +s_starts/'
    map:
      - auditd.log.grp: +s_trim/both/'
      - _hex.grp_is_str: true
  - check:
      - _hex.grp_is_str: +ef_not_exists
    map:
      - auditd.log.grp: +s_from_hexa/$auditd.log.grp

  - check:
      - auditd.log.new_group: +s_starts/"
    map:
      - auditd.log.new_group: +s_trim/both/"
      - _hex.new_group_is_str: true
  - check:
      - _hex.new_group_is_str: +ef_not_exists
      - auditd.log.new_group: +s_starts/'
    map:
      - auditd.log.new_group: +s_trim/both/'
      - _hex.new_group_is_str: true
  - check:
      - _hex.new_group_is_str: +ef_not_exists
    map:
      - auditd.log.new_group: +s_from_hexa/$auditd.log.new_group

  - check:
      - auditd.log.invalid_context: +s_starts/"
    map:
      - auditd.log.invalid_context: +s_trim/both/"
      - _hex.invalid_context_is_str: true
  - check:
      - _hex.invalid_context_is_str: +ef_not_exists
      - auditd.log.invalid_context: +s_starts/'
    map:
      - auditd.log.invalid_context: +s_trim/both/'
      - _hex.invalid_context_is_str: true
  - check:
      - _hex.invalid_context_is_str: +ef_not_exists
    map:
      - auditd.log.invalid_context: +s_from_hexa/$auditd.log.invalid_context

  - check:
      - auditd.log.sw: +s_starts/"
    map:
      - auditd.log.sw: +s_trim/both/"
      - _hex.sw_is_str: true
  - check:
      - _hex.sw_is_str: +ef_not_exists
      - auditd.log.sw: +s_starts/'
    map:
      - auditd.log.sw: +s_trim/both/'
      - _hex.sw_is_str: true
  - check:
      - _hex.sw_is_str: +ef_not_exists
    map:
      - auditd.log.sw: +s_from_hexa/$auditd.log.sw

  - check:
      - auditd.log.root_dir: +s_starts/"
    map:
      - auditd.log.root_dir: +s_trim/both/"
      - _hex.root_dir_is_str: true
  - check:
      - _hex.root_dir_is_str: +ef_not_exists
      - auditd.log.root_dir: +s_starts/'
    map:
      - auditd.log.root_dir: +s_trim/both/'
      - _hex.root_dir_is_str: true
  - check:
      - _hex.root_dir_is_str: +ef_not_exists
    map:
      - auditd.log.root_dir: +s_from_hexa/$auditd.log.root_dir

  - check:
      - auditd.log.proctitle: +s_starts/"
    map:
      - auditd.log.proctitle: +s_trim/both/"
      - _hex.proctitle_is_str: true
  - check:
      - _hex.proctitle_is_str: +ef_not_exists
      - auditd.log.proctitle: +s_starts/'
    map:
      - auditd.log.proctitle: +s_trim/both/'
      - _hex.proctitle_is_str: true
  - check:
      - _hex.proctitle_is_str: +ef_not_exists
    map:
      - auditd.log.proctitle: +s_from_hexa/$auditd.log.proctitle

  - map:
      - _hex: +ef_delete
  # End of hexa to string fields transformation

  - map:
      - auditd.log.old_auid: +ef_rename/$auditd.log.old-auid
      - auditd.log.old_ses: +ef_rename/$auditd.log.old-ses
      - auditd.log.record_type: +s_lo/$auditd.log.record_type
      - destination.address: $auditd.log.dst
      - event.action: +ef_rename/$auditd.log.record_type
      - event.outcome: +ef_rename/$auditd.log.res
      - host.architecture: +ef_rename/$auditd.log.arch
      - message: +ef_rename/$auditd.log.msg
      - process.args_count: +ef_rename/$auditd.log.argc
      - process.args: "+s_to_array/$auditd.log.cmd/ " # It ends with a space
      - process.executable: +ef_rename/$auditd.log.exe
      - process.exit_code: +ef_rename/$auditd.log.exit
      - process.name: +ef_rename/$auditd.log.comm
      - process.parent.pid: +ef_rename/$auditd.log.ppid
      - process.pid: +ef_rename/$auditd.log.pid
      - process.working_directory: +ef_rename/$auditd.log.cwd
      - source.address: +ef_rename/$auditd.log.src
      - source.as.number: +ef_rename/$source.as.asn
      - source.as.organization.name: +ef_rename/$source.as.organization_name
      - user.audit.group.id: +ef_rename/$auditd.log.agid
      - user.audit.id: +ef_rename/$auditd.log.auid
      - user.effective.group.id: +ef_rename/$auditd.log.egid
      - user.effective.id: +ef_rename/$auditd.log.euid
      - user.filesystem.group.id: +ef_rename/$auditd.log.fsgid
      - user.filesystem.id: +ef_rename/$auditd.log.fsuid
      - user.group.id: +ef_rename/$auditd.log.gid
      - user.id: +ef_rename/$auditd.log.uid
      - user.name: +ef_rename/$auditd.log.user
      - user.owner.group.id: +ef_rename/$auditd.log.ogid
      - user.owner.id: +ef_rename/$auditd.log.ouid
      - user.saved.group.id: +ef_rename/$auditd.log.sgid
      - user.saved.id: +ef_rename/$auditd.log.suid
      - user.terminal: +ef_rename/$auditd.log.terminal
